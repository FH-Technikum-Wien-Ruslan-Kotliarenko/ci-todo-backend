name: Backend CI/CD

on:
  push:
    branches: [ "main", "deploy/production" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '22'

      # - name: Install Dependencies
      #   run: npm install

      # - name: Lint Code
      #   run: npm run lint

      # - name: Run Tests
      #   run: npm run test
      #   env: 
      #     DB_DIALECT: ${{ secrets.DB_DIALECT }}
      #     DB_USER: ${{ secrets.DB_USER }}
      #     DB_PW: ${{ secrets.DB_PW }}
      #     DB_HOST: ${{ secrets.DB_HOST }}
      #     DB_NAME: ${{ secrets.DB_NAME }}

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Snyk Monitor
      #   uses: snyk/actions/node@master
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       command: monitor

      # - name: Snyk Test
      #   uses: snyk/actions/node@master
      #   continue-on-error: true # ideally should be false, but for demo purposes we set it to true
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       args: --severity-threshold=high

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build image (amd64)
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ci-todo-backend
          TAG=${{ github.sha }}
          docker build --platform linux/amd64 -t $IMAGE:$TAG -t $IMAGE:latest .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Push
        run: |
          docker push $IMAGE:${{ env.TAG }}
          docker push $IMAGE:latest

  deploy-green:
    if: startsWith(github.ref, 'refs/heads/deploy/production')
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (same commit as this job)
        uses: actions/checkout@v4

      # 0) Clean remote k6 dir to avoid nested k6/k6
      - name: Prepare remote k6 dir
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            mkdir -p ~/app
            rm -rf ~/app/k6
            mkdir -p ~/app/k6

      # 1) Copy the local k6 folder contents, removing the top-level "k6/" path
      - name: Upload k6 scripts
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "k6/**"
          target: "~/app/k6"
          strip_components: 1   # <â€” prevents ~/app/k6/k6/*
          overwrite: true

      # 2) Deploy + run k6 (unchanged except we add a ls check)
      - name: SSH deploy to EC2 (green)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -Eeuo pipefail
            cd ~/app

            echo "Listing ~/app/k6:"
            ls -la k6
            test -f k6/smoke.js || { echo "k6/smoke.js missing"; exit 1; }

            # 1) Update image tag for GREEN
            sed -i '/^BACKEND_GREEN_TAG=/d' .env
            echo "BACKEND_GREEN_TAG=${{ github.sha }}" >> .env

            # 2) Pull & start GREEN
            docker compose pull backend_green
            docker compose up -d backend_green

            # 3) Discover GREEN port
            GREEN_PORT="$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort }}' backend_green)"
            echo "GREEN_PORT=$GREEN_PORT"

            # 4) Wait until GREEN responds at /health
            for i in {1..30}; do
              if curl -fsS --max-time 2 "http://127.0.0.1:${GREEN_PORT}/health" >/dev/null; then
                echo "Green is up on :${GREEN_PORT}"
                break
              fi
              echo "Waiting for green... ($i)"
              sleep 2
              if [ $i -eq 30 ]; then echo "Green failed to start"; exit 1; fi
            done

            # 5) Run k6 smoke (must pass)
            docker run --rm --network host \
              -e BASE_URL="http://127.0.0.1:${GREEN_PORT}" \
              -v "$(pwd)/k6:/scripts:ro" \
              grafana/k6 run /scripts/smoke.js

            # 6) Optional CRUD k6 if API key present
            set +u; source .env || true; set -u
            if [ -n "${API_KEY_FOR_CI:-}" ]; then
              echo "Running CRUD k6 with API key"
              docker run --rm --network host \
                -e BASE_URL="http://127.0.0.1:${GREEN_PORT}" \
                -e API_KEY="${API_KEY_FOR_CI}" \
                -v "$(pwd)/k6:/scripts:ro" \
                grafana/k6 run /scripts/crud.js
            else
              echo "API_KEY_FOR_CI not set; skipping CRUD k6"
            fi

  notify:
    if: failure()
    needs: [build-and-push, deploy-green]
    runs-on: ubuntu-latest

    steps:
      - name: Post text to a Slack channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            "channel": "${{ secrets.SLACK_BACKEND_CHANNEL_ID }}",
            "text": "ðŸš¨ Backend CI pipeline failed for commit ${{ github.sha }}"