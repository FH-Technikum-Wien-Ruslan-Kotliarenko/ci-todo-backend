name: Backend CI/CD

on:
  push:
    branches: [ "main", "deploy/production" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '22'

      # - name: Install Dependencies
      #   run: npm install

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Snyk Monitor
      #   uses: snyk/actions/node@master
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       command: monitor

      # - name: Snyk Test
      #   uses: snyk/actions/node@master
      #   continue-on-error: true # ideally should be false, but for demo purposes we set it to true
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       args: --severity-threshold=high

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build image (amd64)
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ci-todo-backend
          TAG=${{ github.sha }}
          docker build --platform linux/amd64 -t $IMAGE:$TAG -t $IMAGE:latest .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Push
        run: |
          docker push $IMAGE:${{ env.TAG }}
          docker push $IMAGE:latest

  deploy-green:
    if: startsWith(github.ref, 'refs/heads/deploy/production')
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy to EC2 (green)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -Eeuo pipefail
            cd ~/app

            # 1) Update image tag for GREEN
            sed -i '/^BACKEND_GREEN_TAG=/d' .env
            echo "BACKEND_GREEN_TAG=${{ github.sha }}" >> .env

            # 2) Pull & start GREEN
            docker compose pull backend_green
            docker compose up -d backend_green

            # 3) Discover GREEN's published host port for 8080/tcp (e.g., 8083)
            GREEN_PORT="$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort }}' backend_green)"
            echo "GREEN_PORT=$GREEN_PORT"

            # 4) Health-check GREEN locally
            for i in {1..30}; do
              if curl -fsS --max-time 2 "http://127.0.0.1:${GREEN_PORT}/health" >/dev/null; then
                echo "Green healthy on :${GREEN_PORT}"
                break
              fi
              echo "Waiting for green... ($i)"
              sleep 2
              if [ $i -eq 30 ]; then echo "Green failed health"; exit 1; fi
            done

            # 5) Flip Nginx to GREEN and restart
            sed -i 's/set \$active_backend backend_blue;/set \$active_backend backend_green;/' nginx.conf
            docker compose restart nginx

  notify:
    if: failure()
    needs: [build-and-push, deploy-green]
    runs-on: ubuntu-latest

    steps:
      - name: Post text to a Slack channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            "channel": "${{ secrets.SLACK_BACKEND_CHANNEL_ID }}",
            "text": "ðŸš¨ Backend CI pipeline failed for commit ${{ github.sha }}"